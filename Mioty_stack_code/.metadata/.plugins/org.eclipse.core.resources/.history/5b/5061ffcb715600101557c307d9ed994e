#ifdef __cplusplus
extern "C" {
#endif

/**
 @code
  ___ _____ _   ___ _  _____ ___  ___  ___ ___
 / __|_   _/_\ / __| |/ / __/ _ \| _ \/ __| __|
 \__ \ | |/ _ \ (__| ' <| _| (_) |   / (__| _|
 |___/ |_/_/ \_\___|_|\_\_| \___/|_|_\\___|___|
 embedded.connectivity.solutions.==============
 @endcode

 @file
 @copyright  STACKFORCE GmbH, Germany, www.stackforce.de
 @author     STACKFORCE
 @brief      Example main application for the Stack API.

 @example    exampleMain.c
             Example for the API usage of the stack.
*/
/* Standard libraries */
#include <stdint.h>
#include <stdbool.h>
#include <ti/drivers/UART.h>
#include <ti/drivers/SPI.h>
#include "exampleMain.h"
#include "sf_app_hal_lp.h"
#include "sf_app_hal_system.h"
#include "sf_app_hal.h"
#include "sf_app_hal_timer.h"
#include "sf_stack.h"
#include "sf_stack_nb.h"
#include "sf_stack_app_ex.h"
#include "sf_memory_management.h"
#include<flash_interface.h>
#include <syscfg/ti_drivers_config.h>
//#include"app_commons/driver/Board.h"
#ifndef SF_STACK_NUMBER
/*! The definitions SF_STACK_NUMBER is available in the CMakeLists.txt */
#define SF_STACK_NUMBER                 0
#endif

#ifndef SF_STACK_LIST
/*! The definitions SF_STACK_LIST is available in the CMakeLists.txt */
#define SF_STACK_LIST                   { E_STACK_ID_NONE }
#endif

#ifndef SF_STACK_NB_ENABLED
/*! The definition SF_STACK_NB_ENABLED is by default set to 0.
    It defines, if a telegram should be send in a blocking or non blocking way. */
#define SF_STACK_NB_ENABLED             0
#endif

/*! Flag that indicates, that a transmission is ready */
static volatile bool gReadyToSend;
/*! Variable that holds the rx length */
static volatile uint16_t gRxDataLength;
/*! Flag that indicates, that the stack data has changed. */
static volatile bool gStackDataChanged = false;

/*============================================================================*/
/*!
 * @brief  Callback function definition of the stack. This function will be
 *         passed to the stack initialization function as parameter. The stack
 *         uses this callback to inform the application layer about event.
 *
 * @param  event    Defines the event which occurred.
 * @param  data     A pointer to data. The pointer can be NULL, as not
 *                  every event requires data.
 * @param  dataLen  The length of the data. Can be zero.
 *
 * @return The return value shall be E_STACK_RETURN_SUCCESS.
 */
/*============================================================================*/
static stackReturn_t loc_callback( stackEvent_t event, uint8_t *data,
                                   uint16_t dataLen )
{
  /* Handle the events triggered by the Stack */
  switch( event )
  {
    case E_STACK_EVENT_SLEEP:
      /* Application sleep function without RAM loss. */
      sf_app_hal_lp_enterSleep( );
      break;

    case E_STACK_EVENT_DEEP_SLEEP:
      /* Application deep sleep function without RAM loss. */
      sf_app_hal_lp_enterDeepSleep( );
      break;

    case E_STACK_EVENT_WAKEUP:
      /* Application wakeup function. */
      sf_app_hal_lp_wakeup();
      break;

    case E_STACK_EVENT_RX_SUCCESS:
      /* Indication about a new received message. */
      if( sizeof(gRxDataLength) == dataLen )
      {
        gRxDataLength = (data[1] | data[0] << 8);
      }
      break;

    case E_STACK_EVENT_PERSISTENT_DATA_UPDATE:
      /* Indication about updated nvm context. */
      gStackDataChanged = true;
      break;

    default:
      break;
  }

  return E_STACK_RETURN_SUCCESS;
}

/*============================================================================*/
/*!
 * @brief  Callback function definition of the timer. This callback function
 *         sets a status to initiate another transmission.
 *
 * @param  pCtx    A pointer to a potential data context.
 */
/*============================================================================*/
static void loc_timerCallback( void* pCtx )
{
  sf_app_hal_lp_wakeup();
  gReadyToSend = true;
}

/*============================================================================*/
/*!
 * @brief  Function to transmit and receive data.
 */
/*============================================================================*/
static void loc_sendData( void )
{
  uint8_t sampleData[] = { 0x01, 0x02, 0x03, 0x04, 0x05 };
  stackReturn_t status = E_STACK_RETURN_ERROR;

  #if ( 0 == SF_STACK_NB_ENABLED )
  /* Send a frame in a blocking way. */
  status = sf_stack_send( sizeof(sampleData), sampleData );
  #elif ( 1 == SF_STACK_NB_ENABLED )
  /* Send a frame in a non blocking way. */
  status = sf_stack_nb_send( sizeof(sampleData), sampleData );
  #endif

  /* Error Handling. */
  if( status == E_STACK_RETURN_ERROR )
  {
    /* Please note that if you use evaluation version the allowed
        number of transmissions and payload size is limited.
        Check the main page of the Documentation for more information.  */
    sf_app_hal_system_errorHandler( );
  }
}

/*============================================================================*/
/*!
 * @brief  Gets the next stack
 *
 * @return The next stack @ref stackId_t
 */
/*============================================================================*/
static stackId_t loc_getNextStack( void )
{
  static uint8_t currentIndex = 0;
  uint8_t stacks[] = SF_STACK_LIST;
  stackId_t ret = E_STACK_ID_NONE;

  ret = (stackId_t) stacks[currentIndex];

  currentIndex++;

  if( currentIndex >= SF_STACK_NUMBER )
  {
    currentIndex = 0;
  }
  return ret;
}

/*============================================================================*/
/*!
 * @brief  Handles multiprotocol transmissions.
 */
/*============================================================================*/
static void loc_handleTransmission(void)
{
  stackId_t currentStack = E_STACK_ID_NONE;

  /* Check if the timer has expired. */
  if( true == gReadyToSend )
  {
    /* Reset flag. */
    gReadyToSend = false;

    /* Choose the stack for the upcoming transmission */
    currentStack = loc_getNextStack( );

    /* Select the stack and enable it */
    if( E_STACK_RETURN_SUCCESS == sf_stack_selectStack( currentStack ) )
    {
      /* Transmit a frame. */
    //  loc_sendData( );
    }

    /* Start a timer */
    if( true != sf_app_hal_timer_start( 30U, loc_timerCallback ) )
    {
      sf_app_hal_system_errorHandler( );
    }
  }
}

/*============================================================================*/
/*!
 * @brief  Handles the low power mode and process function.
 */
/*============================================================================*/
static void loc_handleStackStates( void )
{
  uint8_t rxData[255] = { 0x00 };
  stackState_t stackState = sf_stack_nb_isBusy();

  if( stackState == E_STACK_STATE_IDLE )
  {
    /* Receive data, if available */
    if( gRxDataLength > 0 )
    {
      sf_stack_receive( gRxDataLength, rxData );
      gRxDataLength = 0;
    }

    /* Write stack data to NVM, if available.
       Please note that the NVM write cycles are limited.
       Please take care about the function sf_stack_app_mem_ex_writeNvm( ). */
    if( true == gStackDataChanged )
    {
      sf_memory_management_writeNvm( );
      gStackDataChanged = false;
    }
  }

  if((E_STACK_STATE_BUSY_SLEEP == stackState) && (gReadyToSend == false))
  {
    sf_app_hal_lp_enterSleep( );
  }
  else if((stackState != E_STACK_STATE_BUSY_PROCESS) && (gReadyToSend == false))
  {
    sf_app_hal_lp_enterDeepSleep( );
  }
  sf_stack_nb_process( );
}

/*============================================================================*/
/*!
 * @brief  Main loop function.
 *         It initializes the stack and transmits a frame continuously.
 */
/*============================================================================*/
void forwardPulseCallBack(uint_least8_t index) {




  }

  void reversePulseCallBack(uint_least8_t index) {


  }
  void reedSenseCallBack(uint_least8_t index) {

 }
  void vibrationSensoeCallback() {



  }
#include <ti/drivers/UART.h>
  UART_Params params;
  UART_Handle uart_101;
  void uart_init() {
    UART_init();
    UART_Params_init( & params);
    params.baudRate = 2400;
    params.readMode = UART_MODE_BLOCKING;
    params.readTimeout = 100000;
    //uart_101 = UART_open(CONFIG_UART0, & params);
  }

#include <ti/drivers/I2C.h>
#include "unistd.h"
  I2C_Handle i2c;
  I2C_Params i2cParams;
  I2C_Transaction i2cTransaction;
  void initI2C() {
    // Initialize I2C
    I2C_init();
    I2C_Params_init( & i2cParams);
    //  i2cParams.frameFormat = I2C_POLLED; // or I2C_DMA if using DMA
    i2cParams.bitRate = I2C_400kHz; // I2C_400kHz;//I2C_100kHz;      // Adjust bit rate as necessary
    i2c = I2C_open(0, & i2cParams);
    if (i2c == NULL) {
     // //*Display_printf(display1, 0, 0, "Error Initializing I2C\n");
     // while (1);
    } else {
      ////*Display_printf(display1, 0, 0, "I2C Initialized!\n");
    }

    sleep(1);
  }
#include <ti/drivers/ADC.h>
#include <ti/drivers/GPIO.h>

#define BOARD_EXT_FLASH_SPI_CS      22
#define BOARD_EXT_FLASH_SPI_CLK     20
#define BOARD_EXT_FLASH_SPI_MOSI    19
#define BOARD_EXT_FLASH_SPI_MISO    21
  void Board_sendExtFlashByte1(uint8_t byte)
  {
      uint8_t i;

      /* SPI Flash CS */
      GPIO_write(BOARD_EXT_FLASH_SPI_CS, 0);

      for (i = 0; i < 8; i++) {
          GPIO_write(BOARD_EXT_FLASH_SPI_CLK, 0); /* SPI Flash CLK */

          /* SPI Flash MOSI */
          GPIO_write(BOARD_EXT_FLASH_SPI_MOSI, (byte >> (7 - i)) & 0x01);
          GPIO_write(BOARD_EXT_FLASH_SPI_CLK, 1);  /* SPI Flash CLK */

          /*
           * Waste a few cycles to keep the CLK high for at
           * least 45% of the period.
           * 3 cycles per loop: 8 loops @ 48 Mhz = 0.5 us.
           */
          CPUdelay(8);
      }

      GPIO_write(BOARD_EXT_FLASH_SPI_CLK, 0);  /* CLK */
      GPIO_write(BOARD_EXT_FLASH_SPI_CS, 1);  /* CS */

      /*
       * Keep CS high at least 40 us
       * 3 cycles per loop: 700 loops @ 48 Mhz ~= 44 us
       */
      CPUdelay(700);
  }
  void Board_wakeUpExtFlash1(void)
  {
      /* SPI Flash CS*/
      GPIO_setConfig(BOARD_EXT_FLASH_SPI_CS, GPIO_CFG_OUTPUT | GPIO_CFG_OUT_HIGH | GPIO_CFG_OUT_STR_MED);

      /*
       *  To wake up we need to toggle the chip select at
       *  least 20 ns and ten wait at least 35 us.
       */

      /* Toggle chip select for ~20ns to wake ext. flash */
      GPIO_write(BOARD_EXT_FLASH_SPI_CS, 0);
      /* 3 cycles per loop: 1 loop @ 48 Mhz ~= 62 ns */
      CPUdelay(1);
      GPIO_write(BOARD_EXT_FLASH_SPI_CS, 1);
      /* 3 cycles per loop: 560 loops @ 48 Mhz ~= 35 us */
      CPUdelay(560);
  }
  void Board_shutDownExtFlash1(void)
  {
      /*
       *  To be sure we are putting the flash into sleep and not waking it,
       *  we first have to make a wake up call
       */
      Board_wakeUpExtFlash1();

      /* SPI Flash CS*/
      GPIO_setConfig(BOARD_EXT_FLASH_SPI_CS, GPIO_CFG_OUTPUT | GPIO_CFG_OUT_HIGH | GPIO_CFG_OUT_STR_MED);
      /* SPI Flash CLK */
      GPIO_setConfig(BOARD_EXT_FLASH_SPI_CLK, GPIO_CFG_OUTPUT | GPIO_CFG_OUT_LOW | GPIO_CFG_OUT_STR_MED);
      /* SPI Flash MOSI */
      GPIO_setConfig(BOARD_EXT_FLASH_SPI_MOSI, GPIO_CFG_OUTPUT | GPIO_CFG_OUT_LOW | GPIO_CFG_OUT_STR_MED);
      /* SPI Flash MISO */
      GPIO_setConfig(BOARD_EXT_FLASH_SPI_MISO, GPIO_CFG_IN_PD);

      uint8_t extFlashShutdown = 0xB9;

      Board_sendExtFlashByte1(extFlashShutdown);

      GPIO_resetConfig(BOARD_EXT_FLASH_SPI_CS);
      GPIO_resetConfig(BOARD_EXT_FLASH_SPI_CLK);
      GPIO_resetConfig(BOARD_EXT_FLASH_SPI_MOSI);
      GPIO_resetConfig(BOARD_EXT_FLASH_SPI_MISO);
  }



#include "TMP1075/TMP1075.h"

#include "TMP1075/config.h"

  SPI_Handle      spi;
    SPI_Params      spiParams;
 //   SPI_Transaction spiTransaction;
#define CMD_SLEEP  0xB9
#define CMD_WAKEUP 0xAB

  void flash_send_command(uint8_t cmd) {
      SPI_Transaction transaction;
      uint8_t txBuf[1];
      uint8_t rxBuf[1];

      txBuf[0] = cmd;

      transaction.count = 1;
      transaction.txBuf = txBuf;
      transaction.rxBuf = rxBuf;

      SPI_transfer(spi, &transaction);
  }
  void flash_sleep() {
       flash_send_command(CMD_SLEEP);
       usleep(3);  // or Task_sleep(x)
   }

void spi_init()
{
    SPI_init();  // Initialize the SPI driver

      SPI_Params_init(&spiParams);  // Initialize SPI parameters
      spiParams.dataSize = 8;       // 8-bit data size

     spi = SPI_open(CONFIG_SPI_0, &spiParams);
}
void exampleMain( void )
{
  gReadyToSend = true;
  gRxDataLength = 0;
  uint8_t stacks[] = SF_STACK_LIST;

  sf_app_hal_init( );
  sf_memory_management_init( );

  /* Initialize the stack API */
  if( E_STACK_RETURN_SUCCESS != sf_stack_init( loc_callback ) )
  {
    sf_app_hal_system_errorHandler( );
  }

  /* Initialize application extensions, if possible */
  if( E_STACK_RETURN_SUCCESS != sf_app_ex_init( ) )
  {
    sf_app_hal_system_errorHandler( );
  }

  /* Initializes the stacks with NVM data, if possible. */
  sf_memory_management_readNvm( SF_STACK_NUMBER, stacks );

   /* flash_init();
   flash_open();
   flash_close();
  // uart_init(); //Inductive sensor , Only Rx pins is used
   ADC_init();

 //   UART_close(uart_101);

      GPIO_enableInt(CONFIG_GPIO_FORWARDPULSE_DIO6); //Forward Pulse Interrupt
      GPIO_enableInt(CONFIG_GPIO_REVERSEPULSE_DIO28); //Reverse Pulse Interrupt
      GPIO_enableInt(CONFIG_GPIO_REED_SWITCH_DIO27); //Reed Switch Interrupt
      GPIO_enableInt(CONFIG_VIBRATION_SENS_DIO18); //Vibration Sensor Interrupt
      //Board_shutDownExtFlash1();*/
  initI2C();
  TMP1075_config(TMP1075_0);
  spi_init();

  // Configure GPIO with pull-down
//  GPIO_PinConfig gpioConfig = GPIO_CFG_INPUT | GPIO_CFG_IN_PU_DOWN;  // Pull-down
//  GPIO_setConfig(Board_GPIO0, gpioConfig);
  flash_sleep();
  while( 1 )
  {
    /* Handles multiprotocol transmissions */
    loc_handleTransmission( );

    /* Handles the stack states. */
    loc_handleStackStates( );
     // sf_app_hal_lp_enterDeepSleep( );
  }
}

/*============================================================================*/
/*!
 * @brief  Main function.
 */
/*============================================================================*/
#ifndef SF_USE_RTOS_APPLICATION
int main( void )
{
  exampleMain( );
  return 0;
}
#endif /* SF_USE_RTOS_APPLICATION */

#ifdef __cplusplus
}
#endif
